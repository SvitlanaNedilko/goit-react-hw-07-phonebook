{"version":3,"sources":["redux/contacts/contacts-action.js","redux/contacts/contacts-selectors.js","redux/contacts/contacts-operations.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/ContactForm/ContactForm.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["fatchContactRequest","createAction","fatchContactSuccess","fatchContactError","addContactRequest","addContactSuccess","addContactError","onDeleteContactRequest","onDeleteContactSuccess","contactsAction","onDeleteContactError","changeFilter","getContacts","state","contacts","contactItems","getFilter","filter","getLoading","loading","getVisibleContacts","createSelector","allContacts","normalizedFilter","toLowerCase","contact","name","includes","axios","defaults","baseURL","ContactList","useSelector","dispatch","useDispatch","onDeleteContact","id","contactId","actions","delete","then","catch","error","useEffect","a","get","data","message","className","length","map","number","onClick","Filter","type","value","onChange","event","currentTarget","ContactForm","useState","setName","setNumber","nameInputId","shortid","generate","numberInputId","onSubmit","e","preventDefault","find","alert","post","htmlFor","pattern","title","required","App","createReducer","_","payload","combineReducers","rootReducer","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.6436f3e0.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit'\r\n\r\nconst fatchContactRequest = createAction('contacts/fatchContactRequest')\r\nconst fatchContactSuccess = createAction('contacts/fatchContactSuccess')\r\nconst fatchContactError = createAction('contacts/fatchContactError')\r\n\r\nconst addContactRequest = createAction('contacts/addContactRequest')\r\nconst addContactSuccess = createAction('contacts/addContactSuccess')\r\nconst addContactError = createAction('contacts/addContactError')\r\n\r\nconst onDeleteContactRequest = createAction('contacts/onDeleteContactRequest')\r\nconst onDeleteContactSuccess = createAction('contacts/onDeleteContactSuccess')\r\nconst onDeleteContactError = createAction('contacts/onDeleteContactError')\r\n\r\nconst changeFilter = createAction('contacts/changeFilter')\r\n\r\nconst contactsAction = {\r\n  fatchContactRequest,\r\n  fatchContactSuccess,\r\n  fatchContactError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  onDeleteContactError,\r\n  onDeleteContactRequest,\r\n  onDeleteContactSuccess,\r\n  changeFilter,\r\n}\r\n\r\nexport default contactsAction\r\n","import { createSelector } from 'reselect'\r\n\r\nexport const getContacts = (state) => state.contacts.contactItems\r\nexport const getFilter = (state) => state.contacts.filter\r\nexport const getLoading = (state) => state.contacts.loading\r\n\r\n// export const getVisibleContacts = (state) => {\r\n//   const filter = getFilter(state)\r\n//   const allContacts = getContacts(state)\r\n//   const normalizedFilter = filter.toLowerCase()\r\n//   return allContacts.filter((contact) =>\r\n//     contact.name.toLowerCase().includes(normalizedFilter)\r\n//   )\r\n// }\r\n\r\nexport const getVisibleContacts = createSelector(\r\n  [getFilter, getContacts],\r\n  (filter, allContacts) => {\r\n    const normalizedFilter = filter.toLowerCase()\r\n    return allContacts.filter((contact) =>\r\n      contact.name.toLowerCase().includes(normalizedFilter)\r\n    )\r\n  }\r\n)\r\n","import axios from 'axios'\r\nimport actions from './contacts-action'\r\n\r\naxios.defaults.baseURL = 'http://localhost:3004'\r\n\r\nexport const fatchContact = () => async (dispatch) => {\r\n  dispatch(actions.fatchContactRequest())\r\n  try {\r\n    const { data } = await axios.get('/contacts')\r\n    dispatch(actions.fatchContactSuccess(data))\r\n  } catch (error) {\r\n    dispatch(actions.fatchContactError(error.message))\r\n  }\r\n  // const response = await axios\r\n  //   .get('/contacts')\r\n  //   .then(({ data }) => dispatch(actions.fatchContactSuccess(data)))\r\n  //   .catch((arror) => dispatch(actions.fatchContactError(arror)))\r\n}\r\n\r\nexport const addContact = (contact) => (dispatch) => {\r\n  dispatch(actions.addContactRequest())\r\n\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(actions.addContactSuccess(data)))\r\n    .catch((error) => dispatch(actions.addContactError(error)))\r\n}\r\n\r\nexport const deleteContact = (contactId) => (dispatch) => {\r\n  dispatch(actions.onDeleteContactRequest())\r\n\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(actions.onDeleteContactSuccess(contactId)))\r\n    .catch((error) => dispatch(actions.onDeleteContactError(error)))\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { getVisibleContacts, deleteContact, fatchContact } from '../../redux'\r\nimport './ContactList.scss'\r\n\r\nconst ContactList = () => {\r\n  const contacts = useSelector(getVisibleContacts)\r\n  const dispatch = useDispatch()\r\n  const onDeleteContact = (id) => dispatch(deleteContact(id))\r\n\r\n  useEffect(() => {\r\n    dispatch(fatchContact())\r\n  }, [dispatch])\r\n\r\n  return (\r\n    <ul className=\"ContactList\">\r\n      {!!contacts.length &&\r\n        contacts.map(({ id, name, number }) => (\r\n          <li className=\"ContactList_Item\" key={id}>\r\n            <p className=\"ContactList_Name\">{name}</p>\r\n            <p>{number}</p>\r\n            <button onClick={() => onDeleteContact(id)}>Delete</button>\r\n          </li>\r\n        ))}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default ContactList\r\n","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { contactsAction, getFilter } from '../../redux'\r\nimport './Filter.scss'\r\n\r\nconst Filter = () => {\r\n  const filter = useSelector(getFilter)\r\n  const dispatch = useDispatch()\r\n\r\n  return (\r\n    <label className=\"Filter_Input\">\r\n      Find contacts by name\r\n      <input\r\n        type=\"text\"\r\n        value={filter}\r\n        onChange={(event) =>\r\n          dispatch(contactsAction.changeFilter(event.currentTarget.value))\r\n        }\r\n      />\r\n    </label>\r\n  )\r\n}\r\n\r\n// const mapStateToProps = (state) => ({\r\n//   filter: state.contacts.filter,\r\n// })\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//   changeFilter: (event) =>\r\n//     dispatch(contactActions.changeFilter(event.currentTarget.value)),\r\n// })\r\n\r\nexport default Filter\r\n","import React, { useState } from 'react'\r\nimport shortid from 'shortid'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { addContact, getContacts } from '../../redux'\r\nimport './ContactForm.scss'\r\n\r\nexport default function ContactForm() {\r\n  const [name, setName] = useState('')\r\n  const [number, setNumber] = useState('')\r\n  const contacts = useSelector(getContacts)\r\n  const dispatch = useDispatch()\r\n\r\n  const nameInputId = shortid.generate()\r\n  const numberInputId = shortid.generate()\r\n\r\n  const handleInputChangeName = (event) => {\r\n    setName(event.currentTarget.value)\r\n  }\r\n\r\n  const handleInputChangeNumber = (event) => {\r\n    setNumber(event.currentTarget.value)\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n\r\n    const isPresentName = contacts.find(\r\n      (contact) => contact.name.toLowerCase() === name.toLowerCase()\r\n    )\r\n    if (isPresentName) {\r\n      alert(`${name} is already in contacts`)\r\n    } else {\r\n      dispatch(addContact({ name, number }))\r\n    }\r\n    setName('')\r\n    setNumber('')\r\n  }\r\n\r\n  return (\r\n    <form className=\"ContactForm\" onSubmit={handleSubmit}>\r\n      <label className=\"ContactForm_Input\" htmlFor={nameInputId}>\r\n        Имя\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          value={name}\r\n          onChange={handleInputChangeName}\r\n          id={nameInputId}\r\n        />\r\n      </label>\r\n      <label className=\"ContactForm_Input\" htmlFor={numberInputId}>\r\n        Телефон\r\n        <input\r\n          type=\"text\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          value={number}\r\n          onChange={handleInputChangeNumber}\r\n          id={numberInputId}\r\n        />\r\n      </label>\r\n      <button type=\"submit\">Add contact</button>\r\n    </form>\r\n  )\r\n}\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//   onSubmit: (contact) => dispatch(contactActions.addContact(contact)),\r\n// })\r\n// export default connect(null, mapDispatchToProps)(ContactForm)\r\n","import ContactList from './components/ContactList/ContactList'\nimport Filter from './components/Filter/Filter'\nimport ContactForm from './components/ContactForm/ContactForm'\nimport './App.scss'\nimport { getLoading } from './redux/contacts/contacts-selectors'\nimport { useSelector } from 'react-redux'\n\nfunction App() {\n  const loading = useSelector(getLoading)\n  return (\n    <div className=\"AppRoot\">\n      {loading && <h2>Загружаем...</h2>}\n      <h1 className=\"AppTitle\">Phonebook</h1>\n      <ContactForm />\n      <h2 className=\"AppTitle\">Contacts</h2>\n      <Filter />\n\n      <ContactList />\n    </div>\n  )\n}\nexport default App\n","import { createReducer } from '@reduxjs/toolkit'\r\nimport { combineReducers } from 'redux'\r\nimport actions from './contacts-action'\r\n\r\nconst contactItems = createReducer([], {\r\n  [actions.fatchContactSuccess]: (_, { payload }) => payload,\r\n  [actions.addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [actions.onDeleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n})\r\n\r\nconst loading = createReducer(false, {\r\n  [actions.fatchContactRequest]: () => true,\r\n  [actions.fatchContactSuccess]: () => false,\r\n  [actions.fatchContactError]: () => false,\r\n  [actions.addContactRequest]: () => true,\r\n  [actions.addContactSuccess]: () => false,\r\n  [actions.addContactError]: () => false,\r\n  [actions.onDeleteContactRequest]: () => true,\r\n  [actions.onDeleteContactSuccess]: () => false,\r\n  [actions.onDeleteContactError]: () => false,\r\n})\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n})\r\n\r\nexport default combineReducers({\r\n  contactItems,\r\n  filter,\r\n  loading,\r\n})\r\n","import {\r\n  combineReducers,\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n} from '@reduxjs/toolkit'\r\nimport logger from 'redux-logger'\r\nimport {\r\n  // persistStore,\r\n  // persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist'\r\nimport contactsReducer from './contacts/contacts-reducer'\r\n// import storage from 'redux-persist/lib/storage'\r\n\r\n// const contactsPersistConfig = {\r\n//   key: 'ContactsList',\r\n//   storage,\r\n//   blacklist: ['filter'],\r\n// }\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: contactsReducer,\r\n})\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n]\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n})\r\n// const persistor = persistStore(store)\r\n// const storeExp = { store, persistor }\r\n\r\nexport default store\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport App from './App'\nimport './index.scss'\nimport store from './redux/store'\n// import { PersistGate } from 'redux-persist/integration/react'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.querySelector('#root')\n)\n"],"sourceRoot":""}